[{"title":"简介 | About","url":"/About.html","content":"\n\n\n## 简介\n\n一个简单，安全，免费的评论系统 | A simple, safe, free comment system\n\n由于这是我在学习 vue 的过程中边学边做的，可能部分功能不是很完善\n\n如果你有什么好的建议或者新功能，欢迎提出或参与贡献\n\n感谢: [Pubudu Dodangoda\n](https://github.com/pupudu) 提供的 NPM 包名\n\n> 后台样式是借鉴于[Twikoo](https://twikoo.js.org/)，以后会有自己的想法、风格、布局做出更改\n\n\n## 特点\n\n- 轻量 (40~kb gzip)\n- 自托管 (Nodejs 后端跨平台)\n- 深色模式 (自动适配深色模式)\n- 免费部署 (服务器、无服务器匀可部署)\n\n### 评论\n\n- 邮件通知\n- 防 XSS 注入\n- 嵌入式评论管理\n- 支持 Markdown 语法 (启用 \\ 禁用)\n- 评论审核\n- 批量处理 (通过 \\ 审核 \\ 垃圾 \\ 删除 )\n- 在线编辑 (评论信息 \\ 配置信息)\n- 评论搜索 (模糊搜索: 昵称、邮箱、IP、评论内容、文章地址)\n- 自动保存 (评论草稿、用户名、邮箱、网址)\n- 身份认证 (博主 Tag \\ 自定义)\n- 评论头像 (Gravatar \\ QQ 头像)\n- 反垃圾检测 ([Akismet-API](https://akismet.com/))\n- 限制评论频率 (每个 IP 10 分钟内最多评论多少条 \\ 10 分钟内所以 IP 只能评论多少条)\n\n### 个性\n\n- 支持限制评论字数 (以免被几万几万的写入数据库中)\n- 支持自定义邮件模板\n- 支持自定义`博主`表示文字\n- 支持多种代码高亮[主题](https://github.com/highlightjs/cdn-release)\n- 支持自定义评论框`placeholder`(占位符)\n- 支持自定义表情列表 (类型: Text \\ image)\n\n## 快速开始\n\n关于`客户端配置`就不多写了，直接借鉴本项目路径下的`/public/index.html`进行配置就好了\n\n服务端部署\n\n> 注意: 目前仅支持 MongoDB\n\n### 克隆仓库部署\n\n<details>\n<summary>点击展开</summary>\n\n```bash\ngit clone https://github.com/lete114/Discuss.git Discuss\ncd Discuss\ncp .env.example .env\nvim .env\n```\n\n.env 修改环境配置文件\n修改好后执行`npm run start:server`即可\n\n```env\n# Discuss environment Config\n\n# 数据库连接地址\nDISCUSS_MONGODB='mongodb://localhost:27017/Discuss'\n\n# 启动的端口号\nDISCUSS_PORT='6870'\n\n# 加密的密钥字符串(自定义)\nDISCUSS_SECRET='Discuss'\n```\n\n</details>\n\n### NPM 安装部署\n\n<details>\n<summary>点击展开</summary>\n\n```bash\nmkdir Discuss                   # 创建目录\ncd Discuss                      # 进入目录\nnpm init -y                     # 初始化npm\nnpm install discuss --save      # 安装Discuss\ntouch index.js .env             # 创建index.js 以及 .env(环> 置文件)\n```\n\nindex.js 引入 Discuss 并调用\n\n```js\nconst Discuss = require(\"discuss\");\nDiscuss.server();\n```\n\n修改环境配置文件\n修改好后执行`node index.js`即可，或者修改`package.json`用`npm run xxx`来启动都可以\n\n```env\n# Discuss environment Config\n\n# 数据库连接地址\nDISCUSS_MONGODB='mongodb://localhost:27017/Discuss'\n\n# 启动的端口号\nDISCUSS_PORT='6870'\n\n# 加密的密钥字符串(自定义)\nDISCUSS_SECRET='Discuss'\n\n```\n\n</details>\n\n以上两种方式任选一种方式部署，部署完成后通过访问部署服务器地址(`http://localhost:6870`)，进行初始化管理员账户\n\n## 开发\n\n加入我们一起开发\n\n```bash\ngit clone https://github.com/lete114/Discuss.git Discuss\ncd Discuss\nnpm install               # 安装依赖\nnpm run start:client      # 启动客户端\nnpm run start:server      # 启动服务端\n```"},{"title":"快速开始 | Quick Start","url":"/Quick-Start.html","content":"\n## 准备\n\n在开始之前我们需要准备什么？？\n1. 服务器 OR 无服务平台(ServerLess)\n2. 数据库 (MongoDB)\n3. NodeJS、NPM、Git环境\n4. 一双手、还有耐心\n\n## 快速开始\n\n感谢您使用 Discuss 评论系统，只需几个步骤，您就可以在您的网站中部署和管理 Discuss 提供评论服务。\n\n### 服务端 (Server)\n\n初始化npm项目\n\n```bash\nmkdir Discuss                   # 创建目录\ncd Discuss                      # 进入目录\nnpm init -y                     # 初始化npm\nnpm install discuss --save      # 安装Discuss\ntouch index.js .env             # 创建index.js 以及 .env(环> 置文件)\n```\n\n编辑`index.js`\n```js\nconst Discuss = require('discuss')\n\n// 选择以什么方式运行\nDiscuss.server() // 服务器使用 (Server)\n\nDiscuss.main() // 无服务器使用 (ServerLess)\n```\n编辑`.env`\n```.env\n# Discuss environment Config\n\n# 数据库连接地址\nDISCUSS_MONGODB='mongodb://localhost:27017/Discuss'\n\n# 启动的端口号\nDISCUSS_PORT='6870'\n\n# 加密的密钥字符串(自定义)\nDISCUSS_SECRET='Discuss'\n```\n\n### 客户端 (Client)\n\n按照如下代码对您的网站进行调整，保存并部署\n此时评论服务就会在你的网站上成功运行 [欢呼]🎉🎉🎉\n\n```html\n<head>\n  ...\n  <script src=\"https://cdn.jsdelivr.net/npm/discuss/dist/Discuss.js\"></script>\n  ...\n</head>\n<body>\n  ...\n  <div id=\"Discuss-Comments\"></div>\n  <script>\n    // < 0.0.9 之前\n    // Discuss({\n    //   el: '#Discuss-Comments',\n    //   serverURL: '', // 服务端部署地址\n    // });\n    // > 0.0.9之后\n    Discuss.init({\n      el: '#Discuss-Comments',\n      serverURL: '', // 服务端部署地址\n    });\n  </script>\n</body>\n```\n\n"},{"title":"获取 MongoDB 数据库 | Get MongoDB DataBase","url":"/Get-MongoDB-DataBase.html","content":"\n1. 注册[MongoDB](https://www.mongodb.com/cloud/atlas/register)账号\n2. 选择地区(选择离你服务端近的即可)\n3. 创建数据库用户，输入用户名和密码\n随后就是添加IP地址，如果您使用的是服务器部署，你直接填写你服务器的 公网IP即可\n如果你使用的是`无服务器(ServerLess)`，ServerLess一般都是动态IP，你无法得到一个固定IP\n所以得允许所有IP\n![](/img/Get-MongoDB-DataBase/Add-IP.png)\n4. 点击`Connect`，点击`Connect you application`，现在nodejs版本，然后复制连接数据库字符串\n> 需要将字符串中的`<password>`替换为您在第三步创建的数据库用户密码，修改`myFirstDatabase`为你想要的数据库名称`Discuss`\n![](/img/Get-MongoDB-DataBase/Connect.png)\n![](/img/Get-MongoDB-DataBase/Get-Connect.png)\n\n"},{"title":"部署 Vercel 无服务器平台 | Vercel ServerLess Deploy","url":"/Vercel-ServerLess-Deploy.html","content":"\n1. 注册 [Vercel](https://vercel.com/signup)账号\n2. 点击下面按钮将 `Discuss` 一键部署到 Vercel\n   [![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/import/project?template=https://github.com/lete114/discuss/tree/vercel)\n3. 随后会提醒你创建一个 Git 仓库，方便后期部署，选择 GitHub，你需要输入一个仓库名，例如：`Discuss-Vercel`，最后等待构建完成点击`Go to Dashboard`\n4. 点击`Settings`进入设置选择`Environment Variables`，添加环境变量\n\n| 属性名          | 属性值           | 描述     |\n| --------------- | ---------------- | -------- |\n| DISCUSS_MONGODB | 数据库连接字符串 | 如果没有的话，你得去注册一个[MongoDB](https://www.mongodb.com/cloud/atlas/register)账号 |\n| DISCUSS_SECRET | Discuss | 你可以自定义 |\n\n5. 由于您是先部署，后配置环境变量，所以环境变量没有生效，你需要点击顶部的`Deployments`，重新部署即可\n![](/img/Vercel-ServerLess-Deploy/Redeploy.png)\n\n"},{"title":"API Docs","url":"/API-Docs.html","content":"\nDiscuss API 与 Discuss 本身并没有直接的关系，你可以随时调用，并不需要初始化 Discuss 即可使用 API\n\n## Visit Stat\n\n访问量统计\n\n例子:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/discuss@latest/dist/Discuss.js\"></script>\n\n<script>\n  /**\n   * 访问量统计\n   * @param {String} url 请求地址\n   * @param {String} path 请求路径\n   * @returns {Number}\n   */\n  Discuss.VisitStat({\n    url: \"https://discuss-doc.imlete.cn\", // Discuss后台请求地址\n    path: location.pathname, // 页面的唯一标识符\n  }).then((data) => {\n    console.log(data); // 直接返回数量\n  });\n</script>\n```\n\n## Recent Comment\n\n获取最新评论\n\n例子:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/discuss@latest/dist/Discuss.js\"></script>\n\n<script>\n  /**\n   * 获取最新评论\n   * @param {String} url 请求地址\n   * @param {Boolean} reply 是否请求回复评论 默认: true\n   * @returns {Array}\n   */\n  Discuss.RecentComment({\n    url: \"https://discuss-doc.imlete.cn\", // Discuss后台请求地址\n    reply: false, // 如果没有需求，第二个参数是不需要写的\n  }).then((data) => {\n    console.log(data);\n    // 返回的 Array\n    // [\n    //   {\n    //     _id: \"61a45c3d521411b101113b96\",\n    //     nick: \"Test\",\n    //     site: \"\",\n    //     content: \"<p>Test API</p>\",\n    //     pid: \"\",\n    //     rid: \"\",\n    //     stick: false,\n    //     master: false,\n    //     avatar: \"https://thirdqq.qlogo.cn/g?b=sdk&k=k26Ec8NWH58mHCww4XBVyQ&s=140&t=0\",\n    //     time: \"2021-11-11\",\n    //   }\n    // ]\n  });\n</script>\n```\n\n## Comment Count\n\n获取评论数量\n\n例子:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/discuss@latest/dist/Discuss.js\"></script>\n\n<script>\n  /**\n   * 请求评论数量\n   * @param {String} url 请求地址\n   * @param {Array} paths 请求的标识符(网站path)\n   * @param {Boolean} reply 是否请求回复评论 默认: true\n   * @returns {Array}\n   */\n  Discuss.CommentCount({\n    url: \"https://discuss-doc.imlete.cn\", // Discuss后台请求地址\n    paths: location.pathname, // 页面的唯一标识符\n    reply: false, // 如果没有需求，第三个参数是不需要写的\n  }).then((data) => {\n    console.log(data);\n    // 返回的 Array\n    // [\n    //   { url: \"/About.html\", count: 10 },\n    //   { url: \"/Quick-Start.html\", count: 11 },\n    //   { url: \"/Get-MongoDB-DataBase.html\", count: 20 },\n    // ];\n  });\n</script>\n```\n\n## 总结\n\n> 对应的请求类型如下\n> 访问量统计: COUNTER\n> 获取最新评论: RECENT_COMMENT\n> 获取评论数量: COMMENT_COUNT\n\n你也可以自定义请求，并非需要 Discuss 的请求方法去请求\n例如使用`axios`\n\n```js\nconst url = \"https://discuss-doc.imlete.cn\";\nconst options = {\n  type: \"COUNTER\",\n  path: location.pathname,\n};\n// 请求访问量统计\naxios.post(url, options).then((data) => {\n  console.log(data); // 直接返回数量\n});\n```\n"}]